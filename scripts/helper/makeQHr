define(function() {
  var config = {
    innerRadiusRatios: {
      temperature: 0.88,
      sky: 0.90,
      calendar: 0.95
    },
    temperatureColorStops: [ //ordered  //above the highest stop and below the lowest will be faded to 0 saturation over (40?) degrees
      {temperature: "-10", hue: "0"}, {temperature: "90", hue: "360"}
    ],
    precipitationProbBucketsLowerLimits: [0, 5, 15, 35, 55, 75],//there should be 6 buckets (including lowerLimit=0 which displays no svg)
    weatherColors: {
      cloudsDay: "hsl(0, 0%, 75%)",
      clearSkyDay: "hsl(60, 100%, 85%)",
      cloudsNight: "hsl(0, 0%, 45%)",
      clearSkyNight: "hsl(230, 35%, 25%)",
      raindrops: "hsl(210, 100%, 55%)"
    }
  };

  var temperatureColorIndex = (function populateTemperatureColorIndex() { 
    var temperatureColorIndex = {};
    var temperatureColorStops = config.temperatureColorStops;
    function interpolate(x, x0, y0, x1, y1){
      return y0 + (x - x0) * (y1 - y0)/(x1 - x0);
    }
    var stopNum = 0;
    for(var deg = temperatureColorStops[0].temperature; 
            deg < temperatureColorStops[temperatureColorStops.length - 1].temperature; deg++){
      if(temperatureColorStops[stopNum+1] > temperatureColorStops.length){break;}
      if(deg > temperatureColorStops[stopNum+1].temperature){stopNum++;}
      var hue = interpolate(deg, temperatureColorStops[stopNum].temperature, temperatureColorStops[stopNum].hue,
                            temperatureColorStops[stopNum+1].temperature, temperatureColorStops[stopNum+1].hue);
      temperatureColorIndex[deg] = "hsv(" + hue + ",100%,100%)";
    }
    
    var lowestStopTemperature = temperatureColorStops[0].temperature;
    for(var deg = lowestStopTemperature; deg > lowestStopTemperature - 40; deg--){
      var saturation = interpolate(deg, lowestStopTemperature, 100, lowestStopTemperature - 40, 0);
      temperatureColorIndex[deg] = "hsv(" + temperatureColorStops[0].hue + "," + saturation + "%,100%)";
    }
    var highestStopTemperature = Number(temperatureColorStops[temperatureColorStops.length - 1].temperature); //Using Number() wasn't necessary in similar situations above, including lowestStopTemperature. That's odd...
    for(var deg = highestStopTemperature; deg < highestStopTemperature + 40; deg++){
      var saturation = interpolate(deg, highestStopTemperature, 100, highestStopTemperature + 40, 0);
      temperatureColorIndex[deg] = "hsv(" + 
                                   temperatureColorStops[temperatureColorStops.length - 1].hue + 
                                   "," + saturation + "%,100%)";
    }
    return temperatureColorIndex;
  })();

  var geometryIndex = (function populateGeometryIndex() {  
    var geometryIndex = [];
    var circle; var angle;
    for(var qHrNum = 0; qHrNum<24*4; qHrNum++){
      if(0<=qHrNum/4 && qHrNum/4<6){
        circle = "bottom";
        angle = -Math.PI/2 + Math.PI/6 * (qHrNum/4);
      }
      else if(6<=qHrNum/4 && qHrNum/4<12){
        circle = "top";
        angle = -Math.PI/2 - Math.PI/6 * (qHrNum/4 - 6);
      }
      else if(12<=qHrNum/4 && qHrNum/4<18){
        circle = "top";
        angle = Math.PI/2 - Math.PI/6 * (qHrNum/4 - 12);
      }
      else if(18<=qHrNum/4 && qHrNum/4<24){
        circle = "bottom";
        angle = Math.PI/2 + Math.PI/6 * (qHrNum/4 - 18);
      }
      if(circle==="bottom")  {geometryIndex[qHrNum] = {dir:1, ty:100};}
      else if(circle==="top"){geometryIndex[qHrNum] = {dir:-1, ty:300};}
      geometryIndex[qHrNum].angle = angle;
    }
    return geometryIndex;
  })();

  //weatherInfo: {temperature, precipitation, clouds, dayNightShade}
  //calendarInfo: {calColor, calInfo}
  return function makeQHr(qHrNum, weatherInfo, calendarInfo) {
    var qHrSvgGroup = document.createElementNS(xmlns, 'g');
    var geometry = geometryIndex[qHrNum];
    
    qHrSvgGroup.appendChild(makeQHrTemperature(weatherInfo.temperature));
    qHrSvgGroup.appendChild(makeQHrSkyBasic(weatherInfo.clouds, weatherInfo.dayNightShade));
    qHrSvgGroup.appendChild(makeQHrSkyPrecipitation(weatherInfo.precipitation));
    qHrSvgGroup.appendChild(makeQHrCalendar(calendarInfo.calColor));
    
    return qHrSvgGroup;
      
    function makeQHrGeneralArc(innerRadiusRatio, widthRatio, color) {
      var tx = 100; var ty = geometry.ty; 
      var angle = geometry.angle; var dir = geometry.dir;
      var ax = tx + innerRadiusRatio*r*Math.cos(angle);
      var ay = ty + innerRadiusRatio*r*Math.sin(angle);
      var bx = tx + innerRadiusRatio*r*Math.cos(angle+Math.PI/24*dir);
      var by = ty + innerRadiusRatio*r*Math.sin(angle+Math.PI/24*dir);
      var flags = "0,0 "; //need to fix
      var arcSvg = document.createElementNS(xmlns, 'path');
      arcSvg.setAttribute("d", "M" + ax+","+ay +" A"+r+","+r+" 0 "+flags + bx+","+by);
      arcSvg.setAttribute("stroke-width", r*widthRatio);
      arcSvg.setAttribute("stroke", color);
      return arcSvg;       //caller appendsChild
    }
    function makeQHrTemperature(temperature) {
      var color = temperatureColorIndex(temperature);
      var widthRatio = config.innerRadiusRatios.sky - config.innerRadiusRatios.temperature;
      var temperatureSvg = makeQHrGeneralArc(config.innerRadiusRatios.temperature, widthRatio, color);
      return temperatureSvg;
    }
    function makeQHrSkyBasic(clouds, dayNightShade) {
      var widthRatio = config.innerRadiusRatios.calendar - config.innerRadiusRatios.sky;
      var cloudsShade = null ; //clouds, dayNightShade, config.weathercolors.cloudsDay, config.weatherColors.cloudsNight
      var clearSkyShade = null ; //dayNightShade, config.weathercolors.clearSkyDay, config.weatherColors.clearSkyNight
        // use regexs to parse HSL?
      var cloudsSvg = makeQHrGeneralArc(config.innerRadiusRatios.sky, widthRatio, cloudsShade);
      var clearSkySvg = makeQHrGeneralArc(config.innerRadiusRatios.sky, widthRatio, clearSkyShade);
      
      var SkyBasicSvgGroup = document.createElementNS(xmlns, 'g');
      SkyBasicSvgGroup.appendChild(cloudsSvg);
      SkyBasicSvgGroup.appendChild(clearSkySvg);
      return SkyBasicSvgGroup;
    }
    function makeQHrSkyPrecipitation(precipitation) {//(more complicated)
      
    }
    function makeQHrCalendar(calColor) {
      var widthRatio = 1 - config.innerRadiusRatios.calendar;
      var calendarSvg = makeQHrGeneralArc(config.innerRadiusRatios.calendar, widthRatio, calColor);
      return calendarSvg;
    }

  };
});